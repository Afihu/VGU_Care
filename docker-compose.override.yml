# Docker Compose override for development - optimized for speed

services:
  # Development optimizations for backend
  backend:
    build:
      cache_from:
        - vgu_care_backend:latest
        - node:18-alpine
      args:
        BUILDKIT_INLINE_CACHE: 1
    environment:
      # Development-specific optimizations
      - NODE_ENV=development
      - NODE_OPTIONS=--max-old-space-size=1024
      - UV_THREADPOOL_SIZE=4
    volumes:
      # Use :cached for better performance on macOS/Windows
      - ./backend:/app/backend:cached
      - ./tests:/app/tests:cached
      # Exclude node_modules from sync for better performance
      - backend_node_modules:/app/node_modules
    command: ["npm", "run", "dev"] # Use nodemon for hot reloading

  # Development optimizations for frontend
  frontend:
    build:
      cache_from:
        - vgu_care_frontend:latest
        - node:18-alpine
      args:
        BUILDKIT_INLINE_CACHE: 1
    environment:
      # Disable source maps for faster builds
      - GENERATE_SOURCEMAP=false
      # Enable fast refresh
      - FAST_REFRESH=true
      # Disable file watching polling (use native file events)
      - CHOKIDAR_USEPOLLING=false
      - WATCHPACK_POLLING=false
    volumes:
      # Use :cached for better performance
      - ./frontend:/app:cached
      # Exclude node_modules and build from sync
      - frontend_node_modules:/app/node_modules
      - frontend_build:/app/build

  # Development database with optimized settings
  postgres:
    environment:
      # Development-specific PostgreSQL optimizations
      - POSTGRES_SHARED_BUFFERS=128MB
      - POSTGRES_EFFECTIVE_CACHE_SIZE=256MB
      - POSTGRES_MAINTENANCE_WORK_MEM=32MB
      - POSTGRES_CHECKPOINT_COMPLETION_TARGET=0.9
      - POSTGRES_WAL_BUFFERS=32MB
      - POSTGRES_DEFAULT_STATISTICS_TARGET=100
      - POSTGRES_RANDOM_PAGE_COST=1.1
      - POSTGRES_EFFECTIVE_IO_CONCURRENCY=200
    command: |
      postgres
      -c shared_buffers=128MB
      -c effective_cache_size=256MB
      -c maintenance_work_mem=32MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=32MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c max_worker_processes=4
      -c max_parallel_workers_per_gather=2
      -c max_parallel_workers=4
      -c max_parallel_maintenance_workers=2
