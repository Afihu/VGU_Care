services:
  # PostgreSQL Database - Optimized
  postgres:
    image: postgres:17-alpine
    container_name: vgu_care_db
    environment:
      POSTGRES_DB: vgu_care
      POSTGRES_USER: vgu_user
      POSTGRES_PASSWORD: vgu_password
      POSTGRES_HOST_AUTH_METHOD: md5 
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
      # Performance optimizations - enhanced
      POSTGRES_SHARED_BUFFERS: 128MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 256MB
      POSTGRES_MAINTENANCE_WORK_MEM: 32MB
      POSTGRES_CHECKPOINT_COMPLETION_TARGET: 0.9
      POSTGRES_WAL_BUFFERS: 32MB
      POSTGRES_DEFAULT_STATISTICS_TARGET: 100
      POSTGRES_RANDOM_PAGE_COST: 1.1
      POSTGRES_EFFECTIVE_IO_CONCURRENCY: 200
    command: |
      postgres
      -c shared_buffers=128MB
      -c effective_cache_size=256MB
      -c maintenance_work_mem=32MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=32MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c max_worker_processes=4
      -c max_parallel_workers_per_gather=2
      -c max_parallel_workers=4
      -c max_parallel_maintenance_workers=2
      
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    deploy:
      resources:
        limits:
          memory: 256M  
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vgu_user -d vgu_care"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - vgu_network
  # Backend API - Optimized
  backend:
    build:
      context: .  
      dockerfile: backend/Dockerfile
      target: development
      # Build optimization
      cache_from:
        - vgu_care_backend:latest
        - node:18-alpine
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: vgu_care_api
    environment:
      - NODE_ENV=development
      - NODE_OPTIONS=--max-old-space-size=1024
      - UV_THREADPOOL_SIZE=4
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=vgu_care
      - DB_USER=vgu_user
      - DB_PASSWORD=vgu_password
      - DATABASE_URL=postgresql://vgu_user:vgu_password@postgres:5432/vgu_care
      - JWT_SECRET=your_jwt_secret_key_here
      - PORT=5001
      # Email configuration
      - EMAIL_ENABLED=${EMAIL_ENABLED:-true}
      - EMAIL_PROVIDER=${EMAIL_PROVIDER:-sendgrid}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - EMAIL_FROM=${EMAIL_FROM}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
    ports:
      - "5001:5001"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      # Use bind mounts for development files - cached for better performance
      - ./backend:/app/backend:cached
      - ./tests:/app/tests:cached
      - ./package.json:/app/package.json:ro
      # Use named volume for node_modules for better performance
      - backend_node_modules:/app/node_modules
      - backend_logs:/app/logs
    command: ["npm", "run", "dev"] # Use nodemon for hot reloading
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped
    networks:
      - vgu_network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      # Build optimization
      cache_from:
        - vgu_care_frontend:latest
        - node:18-alpine
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: vgu_care_frontend
    user: "0:0"  # Run as root to avoid permission issues
    ports:
      - "3000:3000"
    volumes:
      # Use bind mounts with cached consistency for better performance
      - ./frontend:/app
      - /app/node_modules
      - /app/build
      # Use named volumes for node_modules
      # - frontend_node_modules:/app/node_modules
      # - frontend_build:/app/build
    environment:
      - REACT_APP_API_URL=http://localhost:5001
      - REACT_APP_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - FAST_REFRESH=true
      - GENERATE_SOURCEMAP=false
      # ESLint cache disable to avoid permission issues
      - ESLINT_NO_DEV_ERRORS=true
      - DISABLE_ESLINT_PLUGIN=false
    depends_on:
      - backend
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    stdin_open: true
    tty: true
    restart: unless-stopped
    networks:
      - vgu_network

  # Optional: PgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: vgu_care_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@vgu.edu.vn
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    depends_on:
      - postgres
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    profiles:
      - tools
    networks:
      - vgu_network  # Test Runner Service - Optimized
  test:
    build:
      context: .                    # Build from project root (not tests/ directory)
      dockerfile: tests/Dockerfile  # Use the Dockerfile in tests/ directory
      cache_from:
        - node:18-alpine
      args:
        BUILDKIT_INLINE_CACHE: 1
    volumes:
      - ./tests:/app/tests:delegated
      - ./backend:/app/backend:ro
      - ./package.json:/app/package.json:ro
      - ./package-lock.json:/app/package-lock.json:ro
      # Use named volume for node_modules
      - test_node_modules:/app/node_modules
    depends_on:
      backend:
        condition: service_healthy
      postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    networks:
      - vgu_network
    profiles:
      - test
    environment:
      - NODE_ENV=test
      - API_URL=http://backend:5001
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=vgu_care
      - DB_USER=vgu_user
      - DB_PASSWORD=vgu_password
      - DATABASE_URL=postgresql://vgu_user:vgu_password@postgres:5432/vgu_care
      - JWT_SECRET=your_jwt_secret_key_here
      # Email configuration for tests
      - EMAIL_ENABLED=true
      - EMAIL_PROVIDER=sendgrid
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - EMAIL_FROM=${EMAIL_FROM}
      - ADMIN_EMAIL=${ADMIN_EMAIL}

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  backend_logs:
    driver: local
  # Named volumes for node_modules to improve performance
  backend_node_modules:
    driver: local
  frontend_node_modules:
    driver: local
  frontend_build:
    driver: local
  test_node_modules:
    driver: local

networks:
  vgu_network:
    name: vgu_network  # Explicitly set the network name
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16